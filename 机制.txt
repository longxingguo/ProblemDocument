    // JavaScript 引擎的工作方式是，先解析代码，获取所有被声明的变量，然后再一行一行地运行。这造成的结果，就是所有的变量的声明语句，都会被提升到代码的头部，这就叫做变量提升（hoisting）。
    console.log(a);
    var a = 1;
    // 上面代码首先使用console.log方法，在控制台（console）显示变量a的值。这时变量a还没有声明和赋值，所以这是一种错误的做法，但是实际上不会报错。因为存在变量提升，真正运行的是下面的代码。
    var a;
    console.log(a);
    a = 1;
    // 最后的结果是显示undefined，表示变量a已声明，但还未赋值。

        // JavaScript 使用大括号，将多个相关的语句组合在一起，称为“区块”（block）。
    // 对于var命令来说，JavaScript 的区块不构成单独的作用域（scope）。
    {
        var a = 2;
    }
    console.log(a);
    // 上面代码在区块内部，使用var命令声明并赋值了变量a，然后在区块外部，变量a依然有效，区块对于var命令不构成单独的作用域，与不使用区块的情况没有任何区别。在 JavaScript 语言中，单独使用区块并不常见，区块往往用来构成其他更复杂的语法结构，比如for、if、while、function等。

        // JavaScript 语言的每一个值，都属于某一种数据类型。
    // 数值（number）：整数和小数（比如1和3.14）。
    // 字符串（string）：文本（比如Hello World）。
    // 布尔值（boolean）：表示真伪的两个特殊值，即true（真）和false（假）。
    // undefined：表示“未定义”或不存在，即由于目前没有定义，所以此处暂时没有任何值。
    // null：表示空值，即此处的值为空。
    // 对象（object）：各种值组成的集合。


    // 对象是最复杂的数据类型，又可以分成三个子类型。
    // 狭义的对象（object）
    // 数组（array）
    // 函数（function）
    // 函数其实是处理数据的方法，JavaScript 把它当成一种数据类型，可以赋值给变量，这为编程带来了很大的灵活性，也为 JavaScript 的“函数式编程”奠定了基础。


    // 对象（object）是 JavaScript 语言的核心概念，也是最重要的数据类型。
    // 什么是对象？简单说，对象就是一组“键值对”（key-value）的集合，是一种无序的复合数据集合。